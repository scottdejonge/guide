{"version":3,"sources":["webpack:///path---color-050ad5c5ff4ad62b33fe.js","webpack:///./.cache/json/color.json"],"names":["webpackJsonp","./node_modules/json-loader/index.js!./.cache/json/color.json","module","exports","data","markdownRemark","html","frontmatter","path","tags","title","pathContext","prev","excerpt","id","timeToRead","next"],"mappings":"AAAAA,cAAc,iBAERC,+DACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,gBAAkBC,KAAA,mmBAAAC,aAA2nBC,KAAA,SAAAC,MAAA,SAAAC,MAAA,WAAmDC,aAAgBC,MAAQC,QAAA,6PAAAP,KAAA,msEAA8uDQ,GAAA,0FAAAC,WAAA,EAAAR,aAAo2BC,KAAA,OAAAC,MAAA,OAAAC,MAAA,QAA4CM,MAASH,QAAA,4PAAAP,KAAA,86RAA0sRQ,GAAA,iGAAAC,WAAA,EAAAR,aAAg6BC,KAAA,OAAAC,MAAA,OAAAC,MAAA","file":"path---color-050ad5c5ff4ad62b33fe.js","sourcesContent":["webpackJsonp([169803418503871],{\n\n/***/ \"./node_modules/json-loader/index.js!./.cache/json/color.json\":\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Variants</h2>\\n<p>\\\"weight\\\" variants for each primary color value for 100-900 shades of the initial color, with 500 being the initial color and 100-400 being variants of the tint going lighter and 600-900 being variants of the shade going darker22</p>\\n<h3>Palette</h3>\\n<ul>\\n<li>Primary</li>\\n<li>Secondary</li>\\n<li>Tertiary</li>\\n</ul>\\n<h3>Shades</h3>\\n<ul>\\n<li>Light</li>\\n<li>Grey</li>\\n<li>Dark</li>\\n</ul>\\n<h3>Indicators</h3>\\n<ul>\\n<li>Info</li>\\n<li>Success</li>\\n<li>Warning</li>\\n<li>Error</li>\\n</ul>\\n<h2>States</h2>\\n<ul>\\n<li>Hover</li>\\n<li>Active</li>\\n</ul>\\n<h2>Color fucntions</h2>\",\"frontmatter\":{\"path\":\"/color\",\"tags\":[\"color\"],\"title\":\"Color\"}}},\"pathContext\":{\"prev\":{\"excerpt\":\"Constraints Approach Less is more:  the download payload for all styles, assets, and markup should be minised as much as possible. Keep it simple:  all styles should be defined using simple, modern, and understandable  CSS  properties, this means no…\",\"html\":\"<h2>Constraints</h2>\\n<ul>\\n<li></li>\\n</ul>\\n<h2>Approach</h2>\\n<ol>\\n<li><em>Less is more:</em> the download payload for all styles, assets, and markup should be minised as much as possible.</li>\\n<li><em>Keep it simple:</em> all styles should be defined using simple, modern, and understandable <abbr title=\\\"Cascading Style Sheets\\\">CSS</abbr> properties, this means no opinionated development workflows such as Sass, Less etc.</li>\\n<li><em>Effecient design is good design:</em> whilst we should minimise technical understanding, this should not interfere with reusable well defined code, therefore we will utilise PostCSS, Autoprefixer and CSSNext to automate cross-browser compatibility.</li>\\n<li><em>Legibility is key:</em> we use well structured typefaces &#x26; semantics HTML tags with WACG 2.0 compliant contrast ratios to emphasis content.</li>\\n<li><em>Easy reading:</em> we will use a high contrast color palette (<abbr title=\\\"Web Content Accessibility Guidelines 2.0 AAA\\\">WCAG 2.0 AAA</abbr>) and scaling vertical rythym to provide a clear visual heriarchy context.</li>\\n</ol>\\n<h2>Objectives</h2>\\n<ul>\\n<li><em>Clarity:</em> we will measure the clarity of the typographic design through automatic accessibility testing, ensuring culor contrast and DOM tree hierarchy pass WCAG 2.0 AAA guidelines</li>\\n<li><em>Consistancy:</em> we will ensure the consistant rendering of the design across browsers, mediums (screens and print), and devices.</li>\\n</ul>\\n<h2>Writing scalable &#x26; reusable CSS</h2>\\n<h3>Relationship between HTML and CSS</h3>\\n<h4>CSS as presentation</h4>\\n<h4>Selectors</h4>\\n<h5>Class selectors</h5>\\n<p>Classname selectors (<code>.classname</code>) are preferred due to their low specificity and semantic meaning.</p>\\n<h5>Element selectors</h5>\\n<p>Element selectors (<code>h2</code>) are used for reseting or applying the global scope CSS properties to HTML elements, primary for typesetting.</p>\\n<h5>State selectors</h5>\\n<p><code>:hover</code></p>\\n<p><code>:focus</code>  </p>\\n<p><code>:active</code></p>\\n<p><code>:disabled</code></p>\\n<h3>Utilising the Cascade</h3>\\n<h4>Current Color and Color/Background inheritance</h4>\\n<h2>Testing CSS</h2>\\n<h3>Code testing</h3>\\n<h3>Visual Testing</h3>\",\"id\":\"/Users/bigfish/Projects/guide/src/pages/css/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"path\":\"/css\",\"tags\":[\"css\"],\"title\":\"CSS\"}},\"next\":{\"excerpt\":\"Constraints Browser support Inline SVG (IE9+) SVG   not supported in IE, polypill using  svg4everybody Pixel alignment File Size Customisability Inheritance Structure Size Artboard Working with artboards that are multiples of 4px makes scaling SVGs…\",\"html\":\"<h2>Constraints</h2>\\n<ul>\\n<li>\\n<p>Browser support</p>\\n<ul>\\n<li>Inline SVG (IE9+)</li>\\n<li>SVG <code>uses</code> not supported in IE, polypill using <a href=\\\"(https://github.com/jonathantneal/svg4everybody)\\\">svg4everybody</a></li>\\n</ul>\\n</li>\\n<li>Pixel alignment</li>\\n<li>File Size</li>\\n<li>Customisability</li>\\n<li>Inheritance</li>\\n</ul>\\n<h2>Structure</h2>\\n<h3>Size</h3>\\n<h4>Artboard</h4>\\n<p>Working with artboards that are multiples of 4px makes scaling SVGs to common sizes simple.</p>\\n<p>The icon glyph should be designed to the smallest size it will render at, commonly this is either an artboard size of 8px or 16px. </p>\\n<p>By working at on icons at the smallest base size scaling up to larger sizes is easy, with multiples used to scale the icon where needed, for example:</p>\\n<ul>\\n<li>16px × 1.5 24px</li>\\n<li>16px × 2 = 32px</li>\\n</ul>\\n<h3>Shapes and Paths</h3>\\n<p>To get the best results from SVG icons paths and shapes should be aligned to the pixel.</p>\\n<h2>Anatomy of a SVG</h2>\\n<p>Lets examine a common SVG glyph, an arrow made from 3 <code>&#x3C;path></code> objects aligned to the centre of a 16px <code>viewBox</code>.</p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<p>This glyph is created with the following SVG markup:</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\n  &#x3C;g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    &#x3C;path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    &#x3C;path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    &#x3C;path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  &#x3C;/g>\\n&#x3C;/svg>\\n</code></pre>\\n<p>Broken down into it's individual parts the glyph can be constructed with:</p>\\n<h3>The SVG tag</h3>\\n<p>A doctype expressed by <code>xmlns=\\\"http://www.w3.org/2000/svg\\\"</code></p>\\n<p>A <code>viewBox</code> of 16px <code>viewBox=\\\"0 0 16 16\\\"</code> which states the <code>viewBox</code> dartboard or canvas position as being\\n4. x1 = 0\\n5. y1 = 0\\n6. x2 = 16px\\n7. y2 = 16px</p>\\n<p>A <code>width</code> of <code>16px</code> set with the attribute <code>width=\\\"16\\\"</code></p>\\n<p>A <code>height</code> of <code>16px</code> set with the attribute <code>height=\\\"16\\\"</code></p>\\n<h3>The group tag</h3>\\n<p>A group tag <code>&#x3C;g></code> wraps all required <code>&#x3C;path></code> tags and applies:</p>\\n<ol>\\n<li>A <code>fill</code> of <code>none</code> with the attribute <code>fill=\\\"none\\\"</code></li>\\n<li>A <code>fill-rule</code> of <code>even-odd</code> with the attribute <code>fill-rule=\\\"evenodd\\\"</code></li>\\n<li>A <code>stroke</code> of <code>#000000</code> (or black) with the attribute <code>stroke=\\\"#000000\\\"</code></li>\\n<li>A <code>stroke-width</code> of <code>1px</code> with the attribute <code>stroke-width=\\\"1\\\"</code></li>\\n<li>A <code>stroke-linecap</code> of <code>square</code> with the attribute <code>stroke-linecap=\\\"square\\\"</code></li>\\n<li>A transform to centre the icon onto the artboard, moving the glyph to 1px in from the left and 0.5px in from the top with the attribute <code>transform=\\\"translate(1 .5)\\\"</code></li>\\n</ol>\\n<h3>The path(s)</h3>\\n<p>3 × <code>&#x3C;path></code> objects that specify the lines of the arrow</p>\\n<p>From <a href=\\\"(https://css-tricks.com/svg-path-syntax-illustrated-guide/)\\\">The SVG <code>path</code> Syntax: An Illustrated Guide</a></p>\\n<blockquote>\\n<p>The <code>&#x3C;path></code> element in SVG is the ultimate drawing element. It can draw anything! I've heard that under the hood all the other drawing elements ultimately use path anyway. The path element takes a single attribute to describe what it draws: the d attribute. The value it has is a mini syntax all to itself. It can look pretty indecipherable. It's a ton of numbers and letters smashed together into a long string. Like anything computers, there is a reason to the rhyme.</p>\\n</blockquote>\\n<p><code>&#x3C;path d=\\\"M0.5,7.5 L12.5,7.5\\\"/></code></p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n  </g>\\n</svg>\\n<p><code>&#x3C;path d=\\\"M13.5,7.5 L6.5,14.5\\\"/></code></p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n  </g>\\n</svg>\\n<p><code>&#x3C;path d=\\\"M13.5,7.5 L7,1\\\"/></code></p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<h2>Scale</h2>\\n<p>The scale of the glyph is updated by increasing the <code>width</code> and <code>height</code> attributes on the <code>&#x3C;svg></code> tag, this scales the <code>viewBox</code> to the new width and height.</p>\\n<p>The <code>width</code> and <code>height</code> attributes can take any CSS property value, for example, <code>1em</code> or <code>1rem</code> for relative scaling to font size. </p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<pre><code class=\\\"language-html\\\">&#x3C;svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\">\\n  &#x3C;g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    &#x3C;path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    &#x3C;path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    &#x3C;path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  &#x3C;/g>\\n&#x3C;/svg>\\n</code></pre>\\n<h2>Style</h2>\\n<p>The attributes set on the group tag <code>&#x3C;g></code> that wraps the individual <code>&#x3C;path></code> objects can be used to change the style of the glyph, for example:</p>\\n<p>Updating the <code>stroke</code> attribute:</p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"red\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<p>Updating the <code>stroke-width</code> attribute for a bolder glyph</p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<p>Updating the <code>stroke-width</code> <code>stroke-linecap</code> attribute for a bolder rounded glyph</p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<h2>Meaning</h2>\\n<p>Providing meaning to an icon glyph is done through the SVG <code>&#x3C;title></code> and <code>&#x3C;desc></code> tags, these can be used by screen readers through the <code>aria-labeledby</code> attribute and parsing in the values, for example, <code>aria-labelledby=\\\"title desc\\\"</code>.</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\" aria-labelledby=\\\"title desc\\\">\\n&#x3C;title id=\\\"title\\\">Arrow Right&#x3C;/title>\\n&#x3C;desc id=\\\"desc\\\">A black arrow pointing to the right&#x3C;/desc>\\n...\\n&#x3C;/svg>\\n</code></pre>\\n<h2>Preparation</h2>\\n<h3>Individual artboards</h3>\\n<h3>Naming convention</h3>\\n<h3>Organisation</h3>\\n<h2>Export</h2>\\n<h3>Illustrator</h3>\\n<h3>Sketch</h3>\\n<h4>Sketch SVGO Plugin</h4>\\n<h2>Optimisation</h2>\\n<p>From <a href=\\\"(https://github.com/svg/svgo)\\\">SVGO</a></p>\\n<blockquote>\\n<p>SVG files, especially exported from various editors, usually contain a lot of redundant and useless information such as editor metadata, comments, hidden elements, default or non-optimal values and other stuff that can be safely removed or converted without affecting SVG rendering result.</p>\\n</blockquote>\\n<h2>Usage</h2>\\n<h3>Inline</h3>\\n<h4>Pros</h4>\\n<ul>\\n<li>Customisability</li>\\n</ul>\\n<h4>Cons</h4>\\n<ul>\\n<li>Caching</li>\\n</ul>\\n<h3>Uses</h3>\\n<h3>Spritesheets</h3>\",\"id\":\"/Users/bigfish/Projects/guide/src/pages/navigation/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":5,\"frontmatter\":{\"path\":\"/svg\",\"tags\":[\"svg\"],\"title\":\"SVG\"}}}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---color-050ad5c5ff4ad62b33fe.js","module.exports = {\"data\":{\"markdownRemark\":{\"html\":\"<h2>Variants</h2>\\n<p>\\\"weight\\\" variants for each primary color value for 100-900 shades of the initial color, with 500 being the initial color and 100-400 being variants of the tint going lighter and 600-900 being variants of the shade going darker22</p>\\n<h3>Palette</h3>\\n<ul>\\n<li>Primary</li>\\n<li>Secondary</li>\\n<li>Tertiary</li>\\n</ul>\\n<h3>Shades</h3>\\n<ul>\\n<li>Light</li>\\n<li>Grey</li>\\n<li>Dark</li>\\n</ul>\\n<h3>Indicators</h3>\\n<ul>\\n<li>Info</li>\\n<li>Success</li>\\n<li>Warning</li>\\n<li>Error</li>\\n</ul>\\n<h2>States</h2>\\n<ul>\\n<li>Hover</li>\\n<li>Active</li>\\n</ul>\\n<h2>Color fucntions</h2>\",\"frontmatter\":{\"path\":\"/color\",\"tags\":[\"color\"],\"title\":\"Color\"}}},\"pathContext\":{\"prev\":{\"excerpt\":\"Constraints Approach Less is more:  the download payload for all styles, assets, and markup should be minised as much as possible. Keep it simple:  all styles should be defined using simple, modern, and understandable  CSS  properties, this means no…\",\"html\":\"<h2>Constraints</h2>\\n<ul>\\n<li></li>\\n</ul>\\n<h2>Approach</h2>\\n<ol>\\n<li><em>Less is more:</em> the download payload for all styles, assets, and markup should be minised as much as possible.</li>\\n<li><em>Keep it simple:</em> all styles should be defined using simple, modern, and understandable <abbr title=\\\"Cascading Style Sheets\\\">CSS</abbr> properties, this means no opinionated development workflows such as Sass, Less etc.</li>\\n<li><em>Effecient design is good design:</em> whilst we should minimise technical understanding, this should not interfere with reusable well defined code, therefore we will utilise PostCSS, Autoprefixer and CSSNext to automate cross-browser compatibility.</li>\\n<li><em>Legibility is key:</em> we use well structured typefaces &#x26; semantics HTML tags with WACG 2.0 compliant contrast ratios to emphasis content.</li>\\n<li><em>Easy reading:</em> we will use a high contrast color palette (<abbr title=\\\"Web Content Accessibility Guidelines 2.0 AAA\\\">WCAG 2.0 AAA</abbr>) and scaling vertical rythym to provide a clear visual heriarchy context.</li>\\n</ol>\\n<h2>Objectives</h2>\\n<ul>\\n<li><em>Clarity:</em> we will measure the clarity of the typographic design through automatic accessibility testing, ensuring culor contrast and DOM tree hierarchy pass WCAG 2.0 AAA guidelines</li>\\n<li><em>Consistancy:</em> we will ensure the consistant rendering of the design across browsers, mediums (screens and print), and devices.</li>\\n</ul>\\n<h2>Writing scalable &#x26; reusable CSS</h2>\\n<h3>Relationship between HTML and CSS</h3>\\n<h4>CSS as presentation</h4>\\n<h4>Selectors</h4>\\n<h5>Class selectors</h5>\\n<p>Classname selectors (<code>.classname</code>) are preferred due to their low specificity and semantic meaning.</p>\\n<h5>Element selectors</h5>\\n<p>Element selectors (<code>h2</code>) are used for reseting or applying the global scope CSS properties to HTML elements, primary for typesetting.</p>\\n<h5>State selectors</h5>\\n<p><code>:hover</code></p>\\n<p><code>:focus</code>  </p>\\n<p><code>:active</code></p>\\n<p><code>:disabled</code></p>\\n<h3>Utilising the Cascade</h3>\\n<h4>Current Color and Color/Background inheritance</h4>\\n<h2>Testing CSS</h2>\\n<h3>Code testing</h3>\\n<h3>Visual Testing</h3>\",\"id\":\"/Users/bigfish/Projects/guide/src/pages/css/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":1,\"frontmatter\":{\"path\":\"/css\",\"tags\":[\"css\"],\"title\":\"CSS\"}},\"next\":{\"excerpt\":\"Constraints Browser support Inline SVG (IE9+) SVG   not supported in IE, polypill using  svg4everybody Pixel alignment File Size Customisability Inheritance Structure Size Artboard Working with artboards that are multiples of 4px makes scaling SVGs…\",\"html\":\"<h2>Constraints</h2>\\n<ul>\\n<li>\\n<p>Browser support</p>\\n<ul>\\n<li>Inline SVG (IE9+)</li>\\n<li>SVG <code>uses</code> not supported in IE, polypill using <a href=\\\"(https://github.com/jonathantneal/svg4everybody)\\\">svg4everybody</a></li>\\n</ul>\\n</li>\\n<li>Pixel alignment</li>\\n<li>File Size</li>\\n<li>Customisability</li>\\n<li>Inheritance</li>\\n</ul>\\n<h2>Structure</h2>\\n<h3>Size</h3>\\n<h4>Artboard</h4>\\n<p>Working with artboards that are multiples of 4px makes scaling SVGs to common sizes simple.</p>\\n<p>The icon glyph should be designed to the smallest size it will render at, commonly this is either an artboard size of 8px or 16px. </p>\\n<p>By working at on icons at the smallest base size scaling up to larger sizes is easy, with multiples used to scale the icon where needed, for example:</p>\\n<ul>\\n<li>16px × 1.5 24px</li>\\n<li>16px × 2 = 32px</li>\\n</ul>\\n<h3>Shapes and Paths</h3>\\n<p>To get the best results from SVG icons paths and shapes should be aligned to the pixel.</p>\\n<h2>Anatomy of a SVG</h2>\\n<p>Lets examine a common SVG glyph, an arrow made from 3 <code>&#x3C;path></code> objects aligned to the centre of a 16px <code>viewBox</code>.</p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<p>This glyph is created with the following SVG markup:</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\n  &#x3C;g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    &#x3C;path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    &#x3C;path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    &#x3C;path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  &#x3C;/g>\\n&#x3C;/svg>\\n</code></pre>\\n<p>Broken down into it's individual parts the glyph can be constructed with:</p>\\n<h3>The SVG tag</h3>\\n<p>A doctype expressed by <code>xmlns=\\\"http://www.w3.org/2000/svg\\\"</code></p>\\n<p>A <code>viewBox</code> of 16px <code>viewBox=\\\"0 0 16 16\\\"</code> which states the <code>viewBox</code> dartboard or canvas position as being\\n4. x1 = 0\\n5. y1 = 0\\n6. x2 = 16px\\n7. y2 = 16px</p>\\n<p>A <code>width</code> of <code>16px</code> set with the attribute <code>width=\\\"16\\\"</code></p>\\n<p>A <code>height</code> of <code>16px</code> set with the attribute <code>height=\\\"16\\\"</code></p>\\n<h3>The group tag</h3>\\n<p>A group tag <code>&#x3C;g></code> wraps all required <code>&#x3C;path></code> tags and applies:</p>\\n<ol>\\n<li>A <code>fill</code> of <code>none</code> with the attribute <code>fill=\\\"none\\\"</code></li>\\n<li>A <code>fill-rule</code> of <code>even-odd</code> with the attribute <code>fill-rule=\\\"evenodd\\\"</code></li>\\n<li>A <code>stroke</code> of <code>#000000</code> (or black) with the attribute <code>stroke=\\\"#000000\\\"</code></li>\\n<li>A <code>stroke-width</code> of <code>1px</code> with the attribute <code>stroke-width=\\\"1\\\"</code></li>\\n<li>A <code>stroke-linecap</code> of <code>square</code> with the attribute <code>stroke-linecap=\\\"square\\\"</code></li>\\n<li>A transform to centre the icon onto the artboard, moving the glyph to 1px in from the left and 0.5px in from the top with the attribute <code>transform=\\\"translate(1 .5)\\\"</code></li>\\n</ol>\\n<h3>The path(s)</h3>\\n<p>3 × <code>&#x3C;path></code> objects that specify the lines of the arrow</p>\\n<p>From <a href=\\\"(https://css-tricks.com/svg-path-syntax-illustrated-guide/)\\\">The SVG <code>path</code> Syntax: An Illustrated Guide</a></p>\\n<blockquote>\\n<p>The <code>&#x3C;path></code> element in SVG is the ultimate drawing element. It can draw anything! I've heard that under the hood all the other drawing elements ultimately use path anyway. The path element takes a single attribute to describe what it draws: the d attribute. The value it has is a mini syntax all to itself. It can look pretty indecipherable. It's a ton of numbers and letters smashed together into a long string. Like anything computers, there is a reason to the rhyme.</p>\\n</blockquote>\\n<p><code>&#x3C;path d=\\\"M0.5,7.5 L12.5,7.5\\\"/></code></p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n  </g>\\n</svg>\\n<p><code>&#x3C;path d=\\\"M13.5,7.5 L6.5,14.5\\\"/></code></p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n  </g>\\n</svg>\\n<p><code>&#x3C;path d=\\\"M13.5,7.5 L7,1\\\"/></code></p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"16\\\" height=\\\"16\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<h2>Scale</h2>\\n<p>The scale of the glyph is updated by increasing the <code>width</code> and <code>height</code> attributes on the <code>&#x3C;svg></code> tag, this scales the <code>viewBox</code> to the new width and height.</p>\\n<p>The <code>width</code> and <code>height</code> attributes can take any CSS property value, for example, <code>1em</code> or <code>1rem</code> for relative scaling to font size. </p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<pre><code class=\\\"language-html\\\">&#x3C;svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\">\\n  &#x3C;g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    &#x3C;path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    &#x3C;path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    &#x3C;path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  &#x3C;/g>\\n&#x3C;/svg>\\n</code></pre>\\n<h2>Style</h2>\\n<p>The attributes set on the group tag <code>&#x3C;g></code> that wraps the individual <code>&#x3C;path></code> objects can be used to change the style of the glyph, for example:</p>\\n<p>Updating the <code>stroke</code> attribute:</p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"red\\\" stroke-width=\\\"1\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<p>Updating the <code>stroke-width</code> attribute for a bolder glyph</p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"square\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<p>Updating the <code>stroke-width</code> <code>stroke-linecap</code> attribute for a bolder rounded glyph</p>\\n<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\">\\n  <g fill=\\\"none\\\" fill-rule=\\\"evenodd\\\" stroke=\\\"#000000\\\" stroke-width=\\\"2\\\" stroke-linecap=\\\"round\\\" transform=\\\"translate(1 .5)\\\">\\n    <path d=\\\"M0.5,7.5 L12.5,7.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L6.5,14.5\\\"/>\\n    <path d=\\\"M13.5,7.5 L7,1\\\"/>\\n  </g>\\n</svg>\\n<h2>Meaning</h2>\\n<p>Providing meaning to an icon glyph is done through the SVG <code>&#x3C;title></code> and <code>&#x3C;desc></code> tags, these can be used by screen readers through the <code>aria-labeledby</code> attribute and parsing in the values, for example, <code>aria-labelledby=\\\"title desc\\\"</code>.</p>\\n<pre><code class=\\\"language-html\\\">&#x3C;svg xmlns=\\\"http://www.w3.org/2000/svg\\\" width=\\\"32\\\" height=\\\"32\\\" viewBox=\\\"0 0 16 16\\\" aria-labelledby=\\\"title desc\\\">\\n&#x3C;title id=\\\"title\\\">Arrow Right&#x3C;/title>\\n&#x3C;desc id=\\\"desc\\\">A black arrow pointing to the right&#x3C;/desc>\\n...\\n&#x3C;/svg>\\n</code></pre>\\n<h2>Preparation</h2>\\n<h3>Individual artboards</h3>\\n<h3>Naming convention</h3>\\n<h3>Organisation</h3>\\n<h2>Export</h2>\\n<h3>Illustrator</h3>\\n<h3>Sketch</h3>\\n<h4>Sketch SVGO Plugin</h4>\\n<h2>Optimisation</h2>\\n<p>From <a href=\\\"(https://github.com/svg/svgo)\\\">SVGO</a></p>\\n<blockquote>\\n<p>SVG files, especially exported from various editors, usually contain a lot of redundant and useless information such as editor metadata, comments, hidden elements, default or non-optimal values and other stuff that can be safely removed or converted without affecting SVG rendering result.</p>\\n</blockquote>\\n<h2>Usage</h2>\\n<h3>Inline</h3>\\n<h4>Pros</h4>\\n<ul>\\n<li>Customisability</li>\\n</ul>\\n<h4>Cons</h4>\\n<ul>\\n<li>Caching</li>\\n</ul>\\n<h3>Uses</h3>\\n<h3>Spritesheets</h3>\",\"id\":\"/Users/bigfish/Projects/guide/src/pages/navigation/index.md absPath of file >>> MarkdownRemark\",\"timeToRead\":5,\"frontmatter\":{\"path\":\"/svg\",\"tags\":[\"svg\"],\"title\":\"SVG\"}}}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/color.json\n// module id = ./node_modules/json-loader/index.js!./.cache/json/color.json\n// module chunks = 169803418503871"],"sourceRoot":""}